services:
  cmdb-api:
    image: registry.cn-hangzhou.aliyuncs.com/veops/cmdb-api:2.5.3
    container_name: cmdb-api
    env_file:
      - .env
    environment:
      TZ: Asia/Shanghai
      WAIT_HOSTS: infrastructure-cmdb.redis.pix.com:7379,infrastructure-cmdb.mysql.pix.com:3306
      SYSTEM_DEFAULT_LANGUAGE: zh-CN
    command:
      - /bin/sh
      - -c
      - |
        sed -i "s#USE_ACL = False#USE_ACL = True#g" settings.py
        /wait
        flask db-setup
        flask common-check-new-columns
        gunicorn --workers=4 autoapp:app -b 0.0.0.0:5000 -D
        
        celery -A celery_worker.celery worker -E -Q one_cmdb_async --autoscale=4,1 --logfile=one_cmdb_async.log -D
        celery -A celery_worker.celery worker -E -Q acl_async --logfile=one_acl_async.log --autoscale=4,1 -D
        
        nohup flask cmdb-trigger > trigger.log 2>&1 &
        flask cmdb-init-cache
        flask cmdb-init-acl
        flask init-import-user-from-acl
        flask init-department
        nohup flask cmdb-patch -v 2.4.17 &
        flask cmdb-counter > counter.log 2>&1
    ports:
      - '5000:5000'
    networks:
      new:
        aliases:
          - cmdb-api
    healthcheck:
      timeout: 3s
      interval: 5s
      retries: 10
      test: "ps aux|grep -v grep|grep -v '1 root'|grep gunicorn || exit 1"

  cmdb-ui:
    image: registry.cn-hangzhou.aliyuncs.com/veops/cmdb-ui:2.5.3
    container_name: cmdb-ui
    depends_on:
      cmdb-api:
        condition: service_healthy
    environment:
      TZ: Asia/Shanghai
      CMDB_API_HOST: cmdb-api:5000
      NGINX_PORT: 80
    volumes:
      - ./docs/nginx.cmdb.conf.example:/etc/nginx/conf.d/nginx.cmdb.conf.example
    command:
      - /bin/sh
      - -c
      - |
        envsubst '$$CMDB_API_HOST  $$NGINX_PORT' < /etc/nginx/conf.d/nginx.cmdb.conf.example > /etc/nginx/conf.d/cmdb.conf
        nginx -g  'daemon off;'
    networks:
      - new
    ports:
      - "8000:80"

networks:
  new:
    driver: bridge
    name: cmdb_network
